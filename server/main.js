const fs = require('node:fs');
const path = require('node:path');
const fetch = require('node-fetch');


// Serverside Configuration
const root = GetResourcePath(GetCurrentResourceName());
let env_config = require(path.join(root, 'env.js'));

// Requires external module due to JSONC not being a standard JSON format
const parser = require('jsonc-parser');
const config = parser.parse(LoadResourceFile('ccDiscordWrapper', 'config.jsonc'))

// Discord.js initialisation for Discord Bot Module
const { Client, Collection, GatewayIntentBits, EmbedBuilder, WebhookClient } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildVoiceStates, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildPresences, GatewayIntentBits.GuildMembers] });

// Support Checker - Checks if the resource is named correctly
on("onResourceStart", async (resourceName) => {
	if (GetCurrentResourceName() !== "ccDiscordWrapper" && config.supportChecker === true) {
		return console.warn(`^6[Warning]^0 For better support, it is recommended that "${GetCurrentResourceName()}" be renamed to "ccDiscordWrapper"^0`);
	}
	if (config.versionChecker !== false){
		const response = await fetch('https://api.github.com/repos/Concept-Collective/ccDiscordWrapper/releases/latest')
		const json = await response.json()
		if (json.tag_name !== `v${GetResourceMetadata(GetCurrentResourceName(), 'version', 0)}`){
			console.warn(`^3[WARNING]^0 ccDiscordWrapper is out of date! Please update to the latest version: ^2${json.tag_name}^0`)
		} else {
			console.log('^2[INFO]^0 ccDiscordWrapper is up to date!')
		}
	}
});

// Discord Bot Module
if (config.DiscordBot.enabled === true){
	discordProcess();
}

function discordProcess() {
	client.commands = new Collection();
	client.discord = require('discord.js');
	client.config = config;
	client.players = {};
	client.statusMessage = null;
	
	const commandsPath = path.join(root, 'server', 'commands');
	const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
	
	for (const file of commandFiles) {
		const filePath = path.join(commandsPath, file);
		const command = require(filePath);
		// Set a new item in the Collection with the key as the command name and the value as the exported module
		if ('data' in command && 'execute' in command) {
			client.commands.set(command.data.name, command);
		} else {
			console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
		}
	}
	
	const eventsPath = path.join(root, 'server', 'events');
	const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));
	
	for (const file of eventFiles) {
		const filePath = path.join(eventsPath, file);
		const event = require(filePath);
		if (event.once) {
			client.once(event.name, (...args) => event.execute(...args));
		} else {
			client.on(event.name, (...args) => event.execute(...args));
		}
	}
	
	client.login(env_config.Discord_Token);
	
	// Discord Bot Module - senNewMessage function
	async function botSendNewMessage(channelId, message){
		const channel = await client.channels.cache.get(channelId);
		getGuildUsersandRolesforIngamePlayers(channel.guild.id)
		let newEmbed = new client.discord.EmbedBuilder()
		.setColor(0x0099FF)
		.setTitle(`${message[0]}`)
		.setDescription(`${message[1]}`)
		.setTimestamp()
		.setFooter({ text: 'This message was generated by ccDiscordWrapper', iconURL: 'https://conceptcollective.net/img/icon.png', URL: 'https://conceptcollective.net' });
		await channel.send({embeds: [newEmbed]});
	}
	
	async function webhookSendNewMessage(color, name, message, footer) {
		const webhookClient = new WebhookClient({ url: env_config.Discord_Webhook });
		let embed = new EmbedBuilder()
			.setColor(color)
			.setTitle(name)
			.setDescription(message)
			.setTimestamp()
			.setFooter({ text: `${footer} | Generated by ccDiscordWrapper`, iconURL: 'https://conceptcollective.net/img/icon.png', URL: 'https://conceptcollective.net' });

		webhookClient.send({embeds: [embed]});
	}

	function getPlayerDiscordAvatar(source) {
		let avatarURL = client.players[source].avatarURL
		return avatarURL
	}

	function getPlayerDiscordHighestRole(source) {
		let highestRole = client.players[source].roles[0]
		return highestRole
	}
	

	exports('botSendNewMessage', botSendNewMessage);
	exports('webhookSendNewMessage', webhookSendNewMessage);
	exports('getPlayerDiscordAvatar', getPlayerDiscordAvatar);
	exports('getPlayerDiscordHighestRole', getPlayerDiscordHighestRole);
}