const { Events } = require('discord.js');

module.exports = {
	name: Events.ClientReady,
	once: true,
	async execute(client) {
		console.log(`Ready! Logged in as ${client.user.tag}`);
		const guildChannel = await client.channels.cache.get(GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusChannelId'));
		const guildStatusChannel = await client.channels.cache.get(GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusChannelCount'));

		await guildChannel.bulkDelete(1).catch(e => console.warn('Failed to delete previous message - probably becuase there isn\'t one!'));
		let statusEmbed = new client.discord.EmbedBuilder()
			.setColor(0x0099FF)
			.setTitle(`${GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusEmbedTitle')} - Status`)
			.setURL(GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusEmbedURL'))
			.setAuthor({ name: `${client.user.username}`, iconURL: `${client.user.displayAvatarURL()}`, url: 'https://conceptcollective.net' })
			.setDescription('Server has been started <:checkmark:964881366099558481>')
			.setThumbnail(GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusEmbedThumbnail'))
			.setTimestamp()
			.setFooter({ text: 'This message was generated by ccDiscordWrapper', iconURL: 'https://conceptcollective.net/img/icon.png', URL: 'https://conceptcollective.net' });
		let playerCountNum = 0;
		if (GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusChannelCount') !== 'false'){
			updateChannelName(playerCountNum)
		}
		let playerCount = [];
		let players = '**Currently Connected Player(s)**:\n';
		let nameString = '';
		await guildChannel.send({embeds: [statusEmbed]}).then(async sentMessage => {
			client.statusMessage = await sentMessage;
		});
		on('playerConnecting', async (playerName, kickReason, deferrals) => {
			playerCountNum++;
			let playerActualDiscord = GetPlayerIdentifier(source, 3).substring(8);
			if (GetResourceMetadata(GetCurrentResourceName(), 'IsServerUsingESX') === 'true'){
				playerActualDiscord = GetPlayerIdentifier(source, 4).substring(8);
			}
			if (GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusPlayerNames') === 'true'){
				nameString = `â€£ ${playerName} - <@${playerActualDiscord}>`;
				playerCount.push(nameString)
				playerCount.forEach(player => {
					players += `${player}\n`;
				})
				updatePlayerNames(players, statusEmbed)
			} if (GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusChannelCount') !== 'false'){
				updateChannelName(playerCountNum)
			} else {
				statusEmbed.setDescription(`There are currently ${playerCountNum} players connected to the server!`)
			}
		})
		on('playerDropped', (reason) => {
			playerCountNum--;
			let playerActualDiscord = GetPlayerIdentifier(source, 3).substring(8);
			if (GetResourceMetadata(GetCurrentResourceName(), 'IsServerUsingESX') === 'true'){
				playerActualDiscord = GetPlayerIdentifier(source, 4).substring(8);
			}
			if (GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusPlayerNames') === 'true'){
				nameString = `â€£ ${GetPlayerName(source)} - <@${playerActualDiscord}>`;
				playerCount = playerCount.filter( e => e !== nameString);
				players = '**Currently Connected Player(s)**:\n';
				playerCount.forEach(player => {
					players += `${player}\n`;
				})
				updatePlayerNames(players, statusEmbed)
			} if (GetResourceMetadata(GetCurrentResourceName(), 'DiscordStatusChannelCount') !== 'false'){
				updateChannelName(playerCountNum)
			} else {
				statusEmbed.setDescription(`There are currently ${playerCount} players connected to the server!`)
			}
		})

		function updateChannelName(playerCountNumber){
			if (playerCountNumber === 1){
				guildStatusChannel.edit({ name: `ðŸ¦²ï½œ${playerCountNumber}-player` });
			} else {
				guildStatusChannel.edit({ name: `ðŸ¦²ï½œ${playerCountNumber}-players` });
			}
		}

		function updatePlayerNames(players, statusEmbed) {
			if (players === '**Currently Connected Player(s)**:\n'){
				statusEmbed.setDescription('**There are currently no players connected!**');
			} else {
				statusEmbed.setDescription(players);
			};
			client.statusMessage.edit({embeds: [statusEmbed]});
		}

	},
};